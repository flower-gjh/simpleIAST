package com.keven1z.core.vulnerability;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.keven1z.core.EngineController;
import com.keven1z.core.consts.CommonConst;
import com.keven1z.core.graph.taint.TaintData;
import com.keven1z.core.graph.taint.TaintGraph;
import com.keven1z.core.graph.taint.TaintNode;
import com.keven1z.core.model.IASTContext;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.detectors.*;
import com.keven1z.core.vulnerability.report.ReportBuilder;
import com.keven1z.core.vulnerability.report.ReportMessage;
import com.keven1z.core.vulnerability.report.ReportPrinter;
import com.keven1z.core.vulnerability.report.ReportSender;

import java.util.LinkedList;
import java.util.List;

public class DetectAndReportHandler {
    private static final VulnerabilityDetectorComposite DETECTOR_COMPOSITE;

    static {
        DETECTOR_COMPOSITE = new VulnerabilityDetectorComposite();
        DETECTOR_COMPOSITE.addDetector(new SSRFDetector());
        DETECTOR_COMPOSITE.addDetector(new SqliDetector());
        DETECTOR_COMPOSITE.addDetector(new XxeDetector());
        DETECTOR_COMPOSITE.addDetector(new CmdiDetector());
        DETECTOR_COMPOSITE.addDetector(new DeserializationDetector());
        DETECTOR_COMPOSITE.addDetector(new UrlRedirectDetector());
    }

    public static void doHandle(ReportMessage reportMessage) throws JsonProcessingException {
        TaintGraph taintGraph = reportMessage.getTaintGraph();
        List<TaintNode> sinkNodes = taintGraph.getSinkNode();
        for (TaintNode taintNode : sinkNodes) {
            LinkedList<TaintData> realTaintList = taintGraph.bfs(taintNode);
            List<String> sourceList = TaintUtils.calculateSourceValue(realTaintList);
            boolean isDetect = DETECTOR_COMPOSITE.detect(realTaintList, sourceList);

            if (isDetect) {
                String vulnType = taintNode.getTaintData().getVulnType();
                report(vulnType, reportMessage, realTaintList);
            }

        }
    }

    private static void report(String vulnType, ReportMessage reportMessage, LinkedList<TaintData> taintData) throws JsonProcessingException {
        String reportJson = ReportBuilder.build(reportMessage.getAgentId(), reportMessage.getUrl(), reportMessage.getMethod(), reportMessage.getHeaders(),reportMessage.getHttpMessage(), vulnType, taintData);
        String mode = EngineController.context.getMode();
        //debug模式 默认打印漏洞信息
        if (IASTContext.getContext().isOfflineEnabled()) {
            ReportPrinter.print(reportJson);
        } else if (CommonConst.MODE_NORMAL.equals(mode)) {
            ReportSender.send(reportJson);
        }
    }
}
